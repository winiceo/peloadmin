{"version":3,"sources":["../../../app/extend/helper.js"],"names":["MarkdownIt","require","validator","jsxss","moment","bcrypt","locale","md","set","html","xhtmlOut","breaks","linkify","typographer","renderer","rules","fence","tokens","idx","token","language","info","escape","content","code_block","myxss","FilterXSS","onIgnoreTagAttr","tag","name","value","escapeAttrValue","exports","markdown","process","render","text","escapeSignature","signature","split","map","p","join","staticFile","filePath","indexOf","app","config","site_static_host","tabName","tab","pair","tabs","find","proxy","url","ago","date","fromNow","validateId","test","str","bhash","hashSync","bcompare","hash","compareSync","getRandomIntInclusive","minz","maxz","min","Math","ceil","max","floor","random"],"mappings":"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","file":"helper.js","sourcesContent":["\nconst MarkdownIt = require('markdown-it');\nconst validator = require('validator');\nconst jsxss = require('xss');\nconst moment = require('moment');\nconst bcrypt = require('bcryptjs');\n\nmoment.locale('zh-cn'); // 使用中文\n\n// Set default options\nconst md = new MarkdownIt();\n\nmd.set({\n    html: false, // Enable HTML tags in source\n    xhtmlOut: false, // Use '/' to close single tags (<br />)\n    breaks: false, // Convert '\\n' in paragraphs into <br>\n    linkify: true, // Autoconvert URL-like text to links\n    typographer: true // Enable smartypants and other sweet transforms\n});\n\nmd.renderer.rules.fence = (tokens, idx) => {\n    const token = tokens[idx];\n    let language = (token.info && 'language-' + token.info) || '';\n    language = validator.escape(language);\n\n    return (\n        '<pre class=\"prettyprint ' +\n    language +\n    '\">' +\n    '<code>' +\n    validator.escape(token.content) +\n    '</code>' +\n    '</pre>'\n    );\n};\n\nmd.renderer.rules.code_block = (tokens, idx /* , options */) => {\n    const token = tokens[idx];\n\n    return (\n        '<pre class=\"prettyprint\">' +\n    '<code>' +\n    validator.escape(token.content) +\n    '</code>' +\n    '</pre>'\n    );\n};\n\nconst myxss = new jsxss.FilterXSS({\n    onIgnoreTagAttr(tag, name, value) {\n    // 让 prettyprint 可以工作\n        if (tag === 'pre' && name === 'class') {\n            return name + '=\"' + jsxss.escapeAttrValue(value) + '\"';\n        }\n    }\n});\n\nexports.markdown = text => {\n    return (\n        '<div class=\"markdown-text\">' +\n    myxss.process(md.render(text || '')) +\n    '</div>'\n    );\n};\n\nexports.escapeSignature = signature => {\n    return signature\n        .split('\\n')\n        .map(p => {\n            return validator.escape(p);\n        })\n        .join('<br>');\n};\n\nexports.staticFile = function(filePath) {\n    if (filePath.indexOf('http') === 0 || filePath.indexOf('//') === 0) {\n        return filePath;\n    }\n    return this.app.config.site_static_host + filePath;\n};\n\nexports.tabName = function(tab) {\n    const pair = this.app.config.tabs.find(pair => {\n        return pair[0] === tab;\n    });\n    if (pair) {\n        return pair[1];\n    }\n};\n\nexports.proxy = function(url) {\n    return url;\n    // 当 google 和 github 封锁严重时，则需要通过服务器代理访问它们的静态资源\n    // return '/agent?url=' + encodeURIComponent(url);\n};\n\nexports.ago = function(date) {\n\n    return moment(date).fromNow();\n\n};\n\nexports.validateId = str => {\n    return /^[a-zA-Z0-9\\-_]+$/i.test(str);\n};\n\nexports.bhash = str => {\n    return bcrypt.hashSync(str, 10);\n};\n\nexports.bcompare = (str, hash) => {\n    return bcrypt.compareSync(str, hash);\n};\n\nexports.getRandomIntInclusive = (minz, maxz) => {\n    let min = Math.ceil(minz);\n    let max = Math.floor(maxz);\n    return Math.floor(Math.random() * (max - min + 1)) + min; // The maximum is inclusive and the minimum is inclusive\n};\n"]}