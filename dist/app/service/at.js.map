{"version":3,"sources":["../../../app/service/at.js"],"names":["Service","require","AtService","text","ignoreRegexs","forEach","replace","ignore_regex","results","match","names","i","l","length","s","slice","push","Set","topicId","authorId","reply_id","service","user","getUsersByNames","fetchUsers","users","filter","_id","equals","Promise","all","map","message","sendAtMessage","name","RegExp","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,UAAUC,QAAQ,KAAR,EAAeD,OAA/B;;IAEME,S;;;;;;;;;;;;AACF;;;;;mCAKWC,I,EAAM;AACb,gBAAI,CAACA,IAAL,EAAW;AACP,uBAAO,EAAP;AACH;;AAED,gBAAMC,eAAe,CACjB,YADiB,EACH;AACd,gCAFiB,EAEK;AACtB,yBAHiB,EAGF;AACf,uBAJiB,EAIJ;AACb,oCALiB,EAKS;AAC1B,gCANiB,CAArB;;AASAA,yBAAaC,OAAb,CAAqB,wBAAgB;AACjCF,uBAAOA,KAAKG,OAAL,CAAaC,YAAb,EAA2B,EAA3B,CAAP;AACH,aAFD;;AAIA,gBAAMC,UAAUL,KAAKM,KAAL,CAAW,oBAAX,CAAhB;AACA,gBAAMC,QAAQ,EAAd;AACA,gBAAIF,OAAJ,EAAa;AACT,qBAAK,IAAIG,IAAI,CAAR,EAAWC,IAAIJ,QAAQK,MAA5B,EAAoCF,IAAIC,CAAxC,EAA2CD,GAA3C,EAAgD;AAC5C,wBAAIG,IAAIN,QAAQG,CAAR,CAAR;AACA;AACAG,wBAAIA,EAAEC,KAAF,CAAQ,CAAR,CAAJ;AACAL,0BAAMM,IAAN,CAAWF,CAAX;AACH;AACJ;AACD,gDACO,IAAIG,GAAJ,CAAQP,KAAR,CADP;AAGH;;AAED;;;;;;;;;;;;gGAQgCP,I,EAAMe,O,EAASC,Q;;;oBAAUC,Q,uEAAW,I;;;;;;;uCAC9C,KAAKC,OAAL,CAAaC,IAAb,CAAkBC,eAAlB,CAAkC,KAAKC,UAAL,CAAgBrB,IAAhB,CAAlC,C;;;AAAdsB,qC;;;AAEJA,wCAAQA,MAAMC,MAAN,CAAa;AAAA,2CAAQ,CAACJ,KAAKK,GAAL,CAASC,MAAT,CAAgBT,QAAhB,CAAT;AAAA,iCAAb,CAAR;;iEAEOU,QAAQC,GAAR,CAAYL,MAAMM,GAAN,CAAU;AAAA,2CAAQ,OAAKV,OAAL,CAAaW,OAAb,CAAqBC,aAArB,CACjCX,KAAKK,GAD4B,EAEjCR,QAFiC,EAGjCD,OAHiC,EAIjCE,QAJiC,CAAR;AAAA,iCAAV,CAAZ,C;;;;;;;;;;;;;;;;;AAQX;;;;;;;;kCAKUjB,I,EAAM;AACZ,gBAAMsB,QAAQ,KAAKD,UAAL,CAAgBrB,IAAhB,CAAd;AACA,iBAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIc,MAAMZ,MAA1B,EAAkCF,GAAlC,EAAuC;AACnC,oBAAMuB,OAAOT,MAAMd,CAAN,CAAb;AACAR,uBAAOA,KAAKG,OAAL,CACH,IAAI6B,MAAJ,OAAeD,IAAf,iBAAiC,GAAjC,CADG,SAEEA,IAFF,gBAEiBA,IAFjB,OAAP;AAIH;AACD,mBAAO/B,IAAP;AACH;;;;EA3EmBH,O;;AA8ExBoC,OAAOC,OAAP,GAAiBnC,SAAjB","file":"at.js","sourcesContent":["'use strict';\n\nconst Service = require('egg').Service;\n\nclass AtService extends Service {\n    /**\n     * 从文本中提取出@username 标记的用户名数组\n     * @param {String} text 文本内容\n     * @return {Array} 用户名数组\n     */\n    fetchUsers(text) {\n        if (!text) {\n            return [];\n        }\n\n        const ignoreRegexs = [\n            /```.+?```/g, // 去除单行的 ```\n            /^```[\\s\\S]+?^```/gm, // ``` 里面的是 pre 标签内容\n            /`[\\s\\S]+?`/g, // 同一行中，`some code` 中内容也不该被解析\n            /^ {4}.*/gm, // 4个空格也是 pre 标签，在这里 . 不会匹配换行\n            /\\b\\S*?@[^\\s]*?\\..+?\\b/g, // somebody@gmail.com 会被去除\n            /\\[@.+?\\]\\(\\/.+?\\)/g, // 已经被 link 的 username\n        ];\n\n        ignoreRegexs.forEach(ignore_regex => {\n            text = text.replace(ignore_regex, '');\n        });\n\n        const results = text.match(/@[a-z0-9\\-_]+\\b/gim);\n        const names = [];\n        if (results) {\n            for (let i = 0, l = results.length; i < l; i++) {\n                let s = results[i];\n                // remove leading char @\n                s = s.slice(1);\n                names.push(s);\n            }\n        }\n        return [\n            ...new Set(names),\n        ];\n    }\n\n    /*\n     * 根据文本内容中读取用户，并发送消息给提到的用户\n     * @param {String} text 文本内容\n     * @param {String} topicId 主题ID\n     * @param {String} authorId 作者ID\n     * @param {String} type 回复类型\n     * @param {String} reply_id 回复ID\n     */\n    async sendMessageToMentionUsers(text, topicId, authorId, reply_id = null) {\n        let users = await this.service.user.getUsersByNames(this.fetchUsers(text));\n\n        users = users.filter(user => !user._id.equals(authorId));\n\n        return Promise.all(users.map(user => this.service.message.sendAtMessage(\n            user._id,\n            authorId,\n            topicId,\n            reply_id\n        )));\n    }\n\n    /**\n     * 根据文本内容，替换为数据库中的数据\n     * @param {String} text 文本内容\n     * @return {String} 替换后的文本内容\n     */\n    linkUsers(text) {\n        const users = this.fetchUsers(text);\n        for (let i = 0; i < users.length; i++) {\n            const name = users[i];\n            text = text.replace(\n                new RegExp(`@${name}\\\\b(?!\\\\])`, 'g'),\n                `[@${name}](/user/${name})`\n            );\n        }\n        return text;\n    }\n}\n\nmodule.exports = AtService;\n"]}