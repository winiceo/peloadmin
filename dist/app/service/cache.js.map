{"version":3,"sources":["../../../app/service/cache.js"],"names":["Service","require","CacheService","key","app","redis","logger","t","Date","now","get","data","JSON","parse","duration","debug","green","value","seconds","stringify","set","multi","incr","expire","exec","result","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,UAAUC,QAAQ,KAAR,EAAeD,OAA/B;;IAEME,Y;;;;;;;;;;;;gGACQC,G;;;;;;;uCACkB,KAAKC,G,EAAtBC,K,QAAAA,K,EAAOC,M,QAAAA,M;AACRC,iC,GAAIC,KAAKC,GAAL,E;;uCACOJ,MAAMK,GAAN,CAAUP,GAAV,C;;;AAAbQ,oC;;oCACCA,I;;;;;;;;AACLA,uCAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACMG,wC,GAAYN,KAAKC,GAAL,KAAaF,C;;AAC/BD,uCAAOS,KAAP,CAAa,OAAb,EAAsB,KAAtB,EAA6BZ,GAA7B,EAAkC,CAACW,WAAW,IAAZ,EAAkBE,KAApD;iEACOL,I;;;;;;;;;;;;;;;;;;;kGAGCR,G,EAAKc,K,EAAOC,O;;;;;;;wCACI,KAAKd,G,EAAtBC,K,SAAAA,K,EAAOC,M,SAAAA,M;AACRC,iC,GAAIC,KAAKC,GAAL,E;;AACVQ,wCAAQL,KAAKO,SAAL,CAAeF,KAAf,CAAR;;uCACMZ,MAAMe,GAAN,CAAUjB,GAAV,EAAec,KAAf,EAAsB,IAAtB,EAA4BC,OAA5B,C;;;AACAJ,wC,GAAYN,KAAKC,GAAL,KAAaF,C;;AAC/BD,uCAAOS,KAAP,CAAa,OAAb,EAAsB,KAAtB,EAA6BZ,GAA7B,EAAkC,CAACW,WAAW,IAAZ,EAAkBE,KAApD;;;;;;;;;;;;;;;;;;;kGAGOb,G,EAAKe,O;;;;;;;wCACY,KAAKd,G,EAAtBC,K,SAAAA,K,EAAOC,M,SAAAA,M;AACRC,iC,GAAIC,KAAKC,GAAL,E;;uCACWJ,MAAMgB,KAAN,GAAcC,IAAd,CAAmBnB,GAAnB,EAAwBoB,MAAxB,CAA+BpB,GAA/B,EAAoCe,OAApC,EAChBM,IADgB,E;;;AAAfC,sC;AAEAX,wC,GAAYN,KAAKC,GAAL,KAAaF,C;;AAC/BD,uCAAOS,KAAP,CAAa,OAAb,EAAsB,KAAtB,EAA6BZ,GAA7B,EAAkC,CAACW,WAAW,IAAZ,EAAkBE,KAApD;kEACOS,OAAO,CAAP,EAAU,CAAV,C;;;;;;;;;;;;;;;;;;;EA5BYzB,O;;AAgC3B0B,OAAOC,OAAP,GAAiBzB,YAAjB","file":"cache.js","sourcesContent":["'use strict';\n\nconst Service = require('egg').Service;\n\nclass CacheService extends Service {\n    async get(key) {\n        const {redis, logger} = this.app;\n        const t = Date.now();\n        let data = await redis.get(key);\n        if (!data) return;\n        data = JSON.parse(data);\n        const duration = (Date.now() - t);\n        logger.debug('Cache', 'get', key, (duration + 'ms').green);\n        return data;\n    }\n\n    async setex(key, value, seconds) {\n        const {redis, logger} = this.app;\n        const t = Date.now();\n        value = JSON.stringify(value);\n        await redis.set(key, value, 'EX', seconds);\n        const duration = (Date.now() - t);\n        logger.debug('Cache', 'set', key, (duration + 'ms').green);\n    }\n\n    async incr(key, seconds) {\n        const {redis, logger} = this.app;\n        const t = Date.now();\n        const result = await redis.multi().incr(key).expire(key, seconds)\n            .exec();\n        const duration = (Date.now() - t);\n        logger.debug('Cache', 'set', key, (duration + 'ms').green);\n        return result[0][1];\n    }\n}\n\nmodule.exports = CacheService;\n"]}