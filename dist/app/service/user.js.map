{"version":3,"sources":["../../../app/service/user.js"],"names":["utility","require","uuid","Service","UserService","names","length","query","loginname","$in","ctx","model","User","find","exec","loginName","RegExp","findOne","githubId","id","_id","email","ids","opt","count","key","retrieve_key","score","replyCount","update","$inc","reply_count","findByIdAndUpdate","collect_topic_count","name","pass","avatar_url","active","user","avatar","accessToken","v4","save","md5","toLowerCase","makeGravatar","module","exports"],"mappings":"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","file":"user.js","sourcesContent":["\nconst utility = require('utility');\nconst uuid = require('uuid');\nconst Service = require('egg').Service;\n\nclass UserService extends Service {\n    /*\n   * 根据用户名列表查找用户列表\n   * @param {Array} names 用户名列表\n   * @return {Promise[users]} 承载用户列表的 Promise 对象\n   */\n    async getUsersByNames(names) {\n        if (names.length === 0) {\n            return [];\n        }\n\n        const query = { loginname: { $in: names }};\n        return this.ctx.model.User.find(query).exec();\n    }\n\n    /*\n   * 根据登录名查找用户\n   * @param {String} loginName 登录名\n   * @return {Promise[user]} 承载用户的 Promise 对象\n   */\n    getUserByLoginName(loginName) {\n        const query = { loginname: new RegExp('^' + loginName + '$', 'i') };\n        return this.ctx.model.User.findOne(query).exec();\n    }\n\n    /*\n   * 根据 githubId 查找用户\n   * @param {String} githubId 登录名\n   * @return {Promise[user]} 承载用户的 Promise 对象\n   */\n    getUserByGithubId(githubId) {\n        const query = { githubId };\n        return this.ctx.model.User.findOne(query).exec();\n    }\n\n    /*\n   * 根据用户ID，查找用户\n   * @param {String} id 用户ID\n   * @return {Promise[user]} 承载用户的 Promise 对象\n   */\n    async getUserById(id) {\n        if (!id) {\n            return null;\n        }\n\n        return this.ctx.model.User.findOne({ _id: id }).exec();\n    }\n\n    /*\n   * 根据邮箱，查找用户\n   * @param {String} email 邮箱地址\n   * @return {Promise[user]} 承载用户的 Promise 对象\n   */\n    getUserByMail(email) {\n        return this.ctx.model.User.findOne({ email }).exec();\n    }\n\n    /*\n   * 根据用户ID列表，获取一组用户\n   * @param {Array} ids 用户ID列表\n   * @return {Promise[users]} 承载用户列表的 Promise 对象\n   */\n    getUsersByIds(ids) {\n        return this.ctx.model.User.find({ _id: { $in: ids }}).exec();\n    }\n\n    /*\n   * 根据关键字，获取一组用户\n   * Callback:\n   * - err, 数据库异常\n   * - users, 用户列表\n   * @param {String} query 关键字\n   * @param {Object} opt 选项\n   * @return {Promise[users]} 承载用户列表的 Promise 对象\n   */\n    getUsersByQuery(query, opt) {\n        return this.ctx.model.User.find(query, '', opt).exec();\n    }\n\n    /*\n   * 获取关键词能搜索到的用户数量\n   * @param {String} query 搜索关键词\n   */\n    getCountByQuery(query) {\n        return this.ctx.model.User.count(query).exec();\n    }\n\n    /*\n   * 根据查询条件，获取一个用户\n   * @param {String} name 用户名\n   * @param {String} key 激活码\n   * @return {Promise[user]} 承载用户的 Promise 对象\n   */\n    getUserByNameAndKey(loginname, key) {\n        const query = { loginname, retrieve_key: key };\n        return this.ctx.model.User.findOne(query).exec();\n    }\n\n    incrementScoreAndReplyCount(id, score, replyCount) {\n        const query = { _id: id };\n        const update = { $inc: { score, reply_count: replyCount }};\n        return this.ctx.model.User.findByIdAndUpdate(query, update).exec();\n    }\n\n    incrementCollectTopicCount(id) {\n        const query = { _id: id };\n        const update = { $inc: { collect_topic_count: 1 }};\n        return this.ctx.model.User.findByIdAndUpdate(query, update).exec();\n    }\n\n    newAndSave(name, loginname, pass, email, avatar_url, active) {\n        const user = new this.ctx.model.User();\n        user.name = loginname;\n        user.loginname = loginname;\n        user.pass = pass;\n        user.email = email;\n        user.avatar = avatar_url;\n        user.active = active || false;\n        user.accessToken = uuid.v4();\n\n        return user.save();\n    }\n\n    makeGravatar(email) {\n        return (\n            'http://www.gravatar.com/avatar/' +\n      utility.md5(email.toLowerCase()) +\n      '?size=48'\n        );\n    }\n\n    getGravatar(user) {\n        return user.avatar || this.makeGravatar(user.email);\n    }\n}\n\nmodule.exports = UserService;\n"]}