{"version":3,"sources":["../../../app/middleware/token_check.js"],"names":["module","exports","ctx","next","options","token","request","headers","authorization","strToken","split","length","query","body","user","app","jwt","verify","config","secret","console","log","account","status","message","isXHR"],"mappings":";;;;AACAA,OAAOC,OAAP,GAAiB,mBAAW;AACxB;;;AAGA;AAAA,2EAAO,iBAAeC,GAAf,EAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;AACMC,mCAFH,GAEa,EAFb;AAGCC,iCAHD,GAGS,EAHT;;;AAKH,gCAAIH,IAAII,OAAJ,CAAYC,OAAZ,CAAoBC,aAAxB,EAAuC;AAC7BC,wCAD6B,GAClBP,IAAII,OAAJ,CAAYC,OAAZ,CAAoBC,aAApB,CAAkCE,KAAlC,CAAwC,GAAxC,CADkB;;AAEnC,oCAAID,SAASE,MAAT,KAAoB,CAAxB,EAA2B;AACvBN,4CAAQI,SAAS,CAAT,CAAR;AACH;AACJ,6BALD,MAKO;AACHJ,wCAAQH,IAAIU,KAAJ,CAAUP,KAAV,IAAmBH,IAAII,OAAJ,CAAYO,IAAZ,CAAiBR,KAApC,IAA6CH,IAAII,OAAJ,CAAYC,OAAZ,CAAoB,SAApB,CAArD;AACH;;AAEDH,oCAAQC,KAAR,GAAgBA,KAAhB;AACIS,gCAfD,GAeQ,KAfR;AAAA;;AAiBCA,mCAAOZ,IAAIa,GAAJ,CAAQC,GAAR,CAAYC,MAAZ,CAAmBZ,KAAnB,EAA0BH,IAAIa,GAAJ,CAAQG,MAAR,CAAeF,GAAf,CAAmBG,MAA7C,CAAP;AACAC,oCAAQC,GAAR,CAAYhB,KAAZ;AACAe,oCAAQC,GAAR,CAAYP,IAAZ;AACA,gCAAIA,IAAJ,EAAU;AACNZ,oCAAIoB,OAAJ,GAAcR,IAAd;AACH;AAtBF;AAAA;;AAAA;AAAA;AAAA;;AAwBCZ,gCAAIW,IAAJ,GAAW;AACPU,wCAAQ,GADD;AAEPC,yCAAS;;AAFF,6BAAX;AAKAJ,oCAAQC,GAAR;AA7BD;;AAAA;AAAA,gCAgCEP,IAhCF;AAAA;AAAA;AAAA;;AAAA,iCAmCKZ,IAAIuB,KAnCT;AAAA;AAAA;AAAA;;AAoCKvB,gCAAIW,IAAJ,GAAW;AACPU,wCAAQ,GADD;AAEPC,yCAAS;;AAFF,6BAAX;AApCL;;AAAA;AAAA;AAAA,mCA6CGrB,MA7CH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA;AA+CH,CAnDD","file":"token_check.js","sourcesContent":["\nmodule.exports = options => {\n    /*\n     * 需要登录\n     */\n    return async function(ctx, next) {\n        // 后续中间件执行完成后将响应体转换成 gzip\n        const options = {};\n        let token = '';\n\n        if (ctx.request.headers.authorization) {\n            const strToken = ctx.request.headers.authorization.split(' ');\n            if (strToken.length === 2) {\n                token = strToken[1];\n            }\n        } else {\n            token = ctx.query.token || ctx.request.body.token || ctx.request.headers['x-token'];\n        }\n\n        options.token = token;\n        let user = false;\n        try {\n            user = ctx.app.jwt.verify(token, ctx.app.config.jwt.secret);\n            console.log(token);\n            console.log(user);\n            if (user) {\n                ctx.account = user;\n            }\n        } catch (e) {\n            ctx.body = {\n                status: 403,\n                message: '认证失败，请重新登录'\n\n            };\n            console.log(e);\n            return;\n        }\n        if (!user) {\n\n\n            if (ctx.isXHR) {\n                ctx.body = {\n                    status: 403,\n                    message: '认证失败，请重新登录'\n\n                };\n                return;\n            }\n        }\n\n        await next();\n    };\n};\n"]}