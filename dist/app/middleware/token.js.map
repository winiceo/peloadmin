{"version":3,"sources":["../../../app/middleware/token.js"],"names":["module","exports","options","app","checkid","next","token","request","headers","authorization","strToken","split","length","query","body","user","jwt","verify","config","secret","e","isXHR","status","message"],"mappings":";;AAAA;;;;AAIAA,OAAOC,OAAP,GAAiB,UAACC,OAAD,EAAUC,GAAV,EAAkB;AAC/B,iDAAO,SAAUC,OAAV,CAAkBC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEH;AACMH,mCAHH,GAGa,EAHb;AAICI,iCAJD,GAIS,EAJT;;AAKH,gCAAI,KAAKC,OAAL,CAAaC,OAAb,CAAqBC,aAAzB,EAAwC;AAC9BC,wCAD8B,GACnB,KAAKH,OAAL,CAAaC,OAAb,CAAqBC,aAArB,CAAmCE,KAAnC,CAAyC,GAAzC,CADmB;;AAEpC,oCAAID,SAASE,MAAT,KAAoB,CAAxB,EAA2B;AACvBN,4CAAQI,SAAS,CAAT,CAAR;AACH;AACJ,6BALD,MAKO;AACHJ,wCAAQ,KAAKO,KAAL,CAAWP,KAAX,IAAoB,KAAKC,OAAL,CAAaO,IAAb,CAAkBR,KAAtC,IAA+C,KAAKC,OAAL,CAAaC,OAAb,CAAqB,SAArB,CAAvD;AACH;AACD;AACA;AACA;AACAN,oCAAQI,KAAR,GAAgBA,KAAhB;;AAEA;;AAEIS,gCApBD,GAoBQ,KApBR;;AAqBH,gCAAI;AACAA,uCAAOZ,IAAIa,GAAJ,CAAQC,MAAR,CAAeX,KAAf,EAAsBH,IAAIe,MAAJ,CAAWF,GAAX,CAAeG,MAArC,CAAP;AACA;AACA,oCAAIJ,IAAJ,EAAU;AACN,yCAAKA,IAAL,GAAYA,IAAZ;AACH;AACJ,6BAND,CAME,OAAOK,CAAP,EAAU,CAEX;;AA7BE,gCA8BEL,IA9BF;AAAA;AAAA;AAAA;;AAAA,iCAgCK,KAAKM,KAhCV;AAAA;AAAA;AAAA;;AAiCK,iCAAKP,IAAL,GAAY;AACRQ,wCAAQ,GADA;AAERC,yCAAS;;AAFD,6BAAZ;AAjCL;;AAAA;AAAA;AAAA,mCA0CGlB,IA1CH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUD,OAAV;AAAA,SAAP;AAAA;AA4CH,CA7CD","file":"token.js","sourcesContent":["/**\n * Created by leven on 17/2/20.\n */\n\nmodule.exports = (options, app) => {\n    return function* checkid(next) {\n\n        // 后续中间件执行完成后将响应体转换成 gzip\n        const options = {};\n        let token = '';\n        if (this.request.headers.authorization) {\n            const strToken = this.request.headers.authorization.split(' ');\n            if (strToken.length === 2) {\n                token = strToken[1];\n            }\n        } else {\n            token = this.query.token || this.request.body.token || this.request.headers['x-token'];\n        }\n        // if(!token){\n        //     token=this.cookies\n        // }\n        options.token = token;\n\n        // console.log(token)\n\n        let user = false;\n        try {\n            user = app.jwt.verify(token, app.config.jwt.secret);\n            // console.log(user)\n            if (user) {\n                this.user = user;\n            }\n        } catch (e) {\n\n        }\n        if (!user) {\n\n            if (this.isXHR) {\n                this.body = {\n                    status: 403,\n                    message: '认证失败，请重新登录'\n\n                };\n                return;\n            }\n        }\n\n        yield next;\n    };\n};\n"]}