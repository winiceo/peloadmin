{"version":3,"sources":["../../../app/controller/sign.js"],"names":["validator","require","utility","uuid","Controller","SignController","ctx","render","service","config","loginname","trim","request","body","toLowerCase","email","pass","rePass","re_pass","msg","some","item","length","helper","validateId","isEmail","status","user","getUsersByQuery","users","passhash","bhash","avatarUrl","makeGravatar","newAndSave","name","session","logout","redirect","key","query","getUserByLoginName","md5","session_secret","active","save","retrieveKey","v4","retrieveTime","Date","now","getUserByMail","retrieve_key","retrieve_time","getUserByNameAndKey","oneDay","psw","repsw","module","exports"],"mappings":"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","file":"sign.js","sourcesContent":["\nconst validator = require('validator');\nconst utility = require('utility');\nconst uuid = require('uuid');\nconst Controller = require('egg').Controller;\n\nclass SignController extends Controller {\n    async showLogin() {\n        const { ctx } = this;\n        await ctx.render('/sign/signin', { 'pageTitle': '登录' });\n    }\n\n    // sign up\n    async showSignup() {\n        const { ctx } = this;\n        await ctx.render('/sign/signup', { 'pageTitle': '注册' });\n    }\n\n    async signup() {\n        const { ctx, service, config } = this;\n        const loginname = validator.trim(ctx.request.body.loginname || '').toLowerCase();\n        const email = validator.trim(ctx.request.body.email || '').toLowerCase();\n        const pass = validator.trim(ctx.request.body.pass || '');\n        const rePass = validator.trim(ctx.request.body.re_pass || '');\n\n        let msg = '';\n        // 验证信息的正确性\n        if ([loginname, pass, rePass, email].some(item => {\n            return item === '';\n        })) {\n            msg = '信息不完整。';\n        } else if (loginname.length < 5) {\n            msg = '用户名至少需要5个字符。';\n        } else if (!ctx.helper.validateId(loginname)) {\n            msg = '用户名不合法。';\n        } else if (!validator.isEmail(email)) {\n            msg = '邮箱不合法。';\n        } else if (pass !== rePass) {\n            msg = '两次密码输入不一致。';\n        }\n        // END 验证信息的正确性\n\n        if (msg) {\n            ctx.status = 422;\n            await ctx.render('sign/signup', {\n                'error': msg,\n                loginname,\n                email\n            });\n            return;\n        }\n\n        const users = await service.user.getUsersByQuery({\n            '$or': [\n                { loginname },\n                { email }\n            ]\n        }, {});\n\n        if (users.length > 0) {\n            ctx.status = 422;\n            await ctx.render('sign/signup', {\n                'error': '用户名或邮箱已被使用。',\n                loginname,\n                email\n            });\n            return;\n        }\n\n        const passhash = ctx.helper.bhash(pass);\n\n        // create gravatar\n        const avatarUrl = service.user.makeGravatar(email);\n\n        await service.user.newAndSave(loginname, loginname, passhash, email, avatarUrl, false);\n        // 发送激活邮件\n        // await service.mail.sendActiveMail(email, utility.md5(email + passhash + config.session_secret), loginname);\n        await ctx.render('sign/signup', {\n            'success': '欢迎加入 ' + config.name + '！我们已给您的注册邮箱发送了一封邮件，请点击里面的链接来激活您的帐号。'\n        });\n    }\n\n    async signout() {\n        const { ctx } = this;\n        ctx.session = null;\n        ctx.logout();\n        ctx.redirect('/');\n    }\n\n    async activeAccount() {\n        const { ctx, service, config } = this;\n        const key = validator.trim(ctx.query.key || '');\n        const name = validator.trim(ctx.query.name || '');\n\n        const user = await service.user.getUserByLoginName(name);\n        if (!user) {\n            await ctx.render('notify/notify', { 'error': '用户不存在' });\n            return;\n        }\n\n        const passhash = user.pass;\n        if (!user || utility.md5(user.email + passhash + config.session_secret) !== key) {\n            await ctx.render('notify/notify', { 'error': '信息有误，帐号无法被激活。' });\n            return;\n        }\n\n        if (user.active) {\n            await ctx.render('notify/notify', { 'error': '帐号已经是激活状态。' });\n            return;\n        }\n\n        user.active = true;\n        await user.save();\n        await ctx.render('notify/notify', { 'success': '帐号已被激活，请登录' });\n    }\n\n    async showSearchPass() {\n        await this.ctx.render('sign/search_pass');\n    }\n\n    async updateSearchPass() {\n        const { ctx, service } = this;\n        const email = validator.trim(ctx.request.body.email).toLowerCase();\n        if (!validator.isEmail(email)) {\n            await this.ctx.render('sign/search_pass', {\n                'error': '邮箱不合法',\n                email\n            });\n            return;\n        }\n\n        // 动态生成retrive_key和timestamp到users collection,之后重置密码进行验证\n        const retrieveKey = uuid.v4();\n        const retrieveTime = Date.now();\n\n        const user = await service.user.getUserByMail(email);\n        if (!user) {\n            await this.ctx.render('sign/search_pass', {\n                'error': '没有这个电子邮箱。',\n                email\n            });\n            return;\n        }\n\n        user.retrieve_key = retrieveKey;\n        user.retrieve_time = retrieveTime;\n        await user.save();\n\n        // 发送重置密码邮件\n        // mail.sendResetPassMail(email, retrieveKey, user.loginname);\n        await this.ctx.render('notify/notify', {\n            'success': '我们已给您填写的电子邮箱发送了一封邮件，请在24小时内点击里面的链接来重置密码。'\n        });\n    }\n\n    async resetPass() {\n        const { ctx, service } = this;\n        const key = validator.trim(ctx.query.key || '');\n        const name = validator.trim(ctx.query.name || '');\n\n        const user = await service.user.getUserByNameAndKey(name, key);\n        if (!user) {\n            ctx.status = 403;\n            await this.ctx.render('notify/notify', {\n                'error': '信息有误，密码无法重置。'\n            });\n            return;\n        }\n\n        const now = Date.now();\n        const oneDay = 1000 * 60 * 60 * 24;\n        if (!user.retrieve_time || now - user.retrieve_time > oneDay) {\n            ctx.status = 403;\n            await this.ctx.render('notify/notify', {\n                'error': '该链接已过期，请重新申请。'\n            });\n            return;\n        }\n        await this.ctx.render('sign/reset', { name, key });\n    }\n\n    async updatePass() {\n        const { ctx, service } = this;\n        const psw = validator.trim(ctx.request.body.psw) || '';\n        const repsw = validator.trim(ctx.request.body.repsw) || '';\n        const key = validator.trim(ctx.request.body.key) || '';\n        const name = validator.trim(ctx.request.body.name) || '';\n\n        if (psw !== repsw) {\n            await this.ctx.render('sign/reset', {\n                name,\n                key,\n                'error': '两次密码输入不一致。'\n            });\n            return;\n        }\n        const user = await service.user.getUserByNameAndKey(name, key);\n\n        if (!user) {\n            await this.ctx.render('notify/notify', {\n                'error': '错误的激活链接'\n            });\n            return;\n        }\n        const passhash = ctx.helper.bhash(psw);\n        user.pass = passhash;\n        user.retrieve_key = null;\n        user.retrieve_time = null;\n        user.active = true; // 用户激活\n\n        await user.save();\n        await this.ctx.render('notify/notify', { 'success': '你的密码已重置。' });\n    }\n}\n\nmodule.exports = SignController;\n"]}