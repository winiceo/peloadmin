{"version":3,"sources":["../../../app/controller/user.js"],"names":["_","require","utility","validator","Controller","UserController","ctx","service","config","user_name","params","name","user","getUserByLoginName","status","message","query","author_id","_id","opt","limit","sort","Promise","all","topic","getTopicsByQuery","reply","getRepliesByAuthorId","recent_topics","replies","topic_ids","Set","map","topic_id","toString","slice","$in","recent_replies","sortBy","indexOf","url","token","active","is_admin","md5","email","pass","session_secret","render","pageTitle","loginname","getUsersByQuery","is_star","stars","is_block","tops","users","page","Number","list_topic_count","pages","Math","ceil","collect_topic_count","skip","topicCollect","getTopicCollectsByUserId","collects","ids","doc","topics","current_page","getCountByQuery","all_topics_count","getCountByAuthorId","count","id","getUserById","request","save","success","msg","data","isSuccess","body","location","signature","weibo","accessToken","error","showMessage","action","trim","redirect","oldPass","old_pass","newPass","new_pass","equal","helper","bcompare","newPassHash","bhash","user_id","model","Topic","update","$set","deleted","multi","Reply","$pull","ups","module","exports"],"mappings":"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","file":"user.js","sourcesContent":["\nconst _ = require('lodash');\nconst utility = require('utility');\nconst validator = require('validator');\nconst Controller = require('egg').Controller;\n\nclass UserController extends Controller {\n\n    async index() {\n        const { ctx, service, config } = this;\n        const user_name = ctx.params.name;\n        const user = await ctx.service.user.getUserByLoginName(user_name);\n        if (!user) {\n            ctx.status = 404;\n            ctx.message = '这个用户不存在。';\n            return;\n        }\n\n        let query = { author_id: user._id };\n        const opt = { limit: 5, sort: '-create_at' };\n        const [\n            recent_topics, replies\n        ] = await Promise.all([\n            service.topic.getTopicsByQuery(query, opt),\n            service.reply.getRepliesByAuthorId(user._id, { limit: 20, sort: '-create_at' })\n        ]);\n\n        // 只显示最近5条\n        const topic_ids = [...new Set(replies.map(reply => reply.topic_id.toString()))].slice(0, 5);\n\n        query = { _id: { $in: topic_ids }};\n        let recent_replies = await service.topic.getTopicsByQuery(query, {});\n\n        recent_replies = _.sortBy(recent_replies, topic => {\n            return topic_ids.indexOf(topic._id.toString());\n        });\n\n        user.url = (() => {\n            if (user.url && user.url.indexOf('http') !== 0) {\n                return 'http://' + user.url;\n            }\n            return user.url;\n        })();\n\n        // 如果用户没有激活，那么管理员可以帮忙激活\n        let token = '';\n        if (!user.active && ctx.user && ctx.user.is_admin) {\n            token = utility.md5(user.email + user.pass + config.session_secret);\n        }\n\n        await ctx.render('user/index', {\n            user,\n            recent_topics,\n            recent_replies,\n            token,\n            pageTitle: `@${user.loginname} 的个人主页`\n        });\n    }\n\n    async listStars() {\n        const { ctx, service } = this;\n        const stars = await service.user.getUsersByQuery({ is_star: true }, {});\n        await ctx.render('user/stars', { stars });\n    }\n\n    async top100() {\n        const { ctx, service } = this;\n        const opt = { limit: 100, sort: '-score' };\n        const tops = await service.user.getUsersByQuery({ is_block: false }, opt);\n        await ctx.render('user/top100', {\n            users: tops,\n            pageTitle: 'top100'\n        });\n    }\n\n    async listCollectedTopics() {\n        const { ctx, service } = this;\n        const name = ctx.params.name;\n        const page = Number(ctx.query.page) || 1;\n        const limit = this.config.list_topic_count;\n\n        const user = await service.user.getUserByLoginName(name);\n\n        if (!user) {\n            ctx.status = 404;\n            ctx.message = '这个用户不存在。';\n            return;\n        }\n\n        const pages = Math.ceil(user.collect_topic_count / limit);\n        const opt = { skip: (page - 1) * limit, limit };\n\n        const collects = await service.topicCollect.getTopicCollectsByUserId(user._id, opt);\n        const ids = collects.map(doc => {\n            return doc.topic_id.toString();\n        });\n\n        const query = { _id: { $in: ids }};\n        let topics = await service.topic.getTopicsByQuery(query, {});\n        topics = _.sortBy(topics, topic => {\n            return ids.indexOf(topic._id.toString());\n        });\n\n        await ctx.render('user/collect_topics', {\n            topics,\n            current_page: page,\n            pages,\n            user\n        });\n    }\n\n    async listTopics() {\n        const { ctx, service, config } = this;\n        const user_name = ctx.params.name;\n        const page = Number(ctx.query.page) || 1;\n        const limit = config.list_topic_count;\n\n        const user = await service.user.getUserByLoginName(user_name);\n\n        if (!user) {\n            ctx.status = 404;\n            ctx.message = '这个用户不存在。';\n            return;\n        }\n\n        const query = { author_id: user._id };\n        const opt = { skip: (page - 1) * limit, limit, sort: '-create_at' };\n        const [topics, all_topics_count] = await Promise.all([\n            service.topic.getTopicsByQuery(query, opt),\n            service.topic.getCountByQuery(query)\n        ]);\n        const pages = Math.ceil(all_topics_count / limit);\n\n        await ctx.render('user/topics', {\n            user,\n            topics,\n            current_page: page,\n            pages\n        });\n    }\n\n    async listReplies() {\n        const { ctx, service } = this;\n        const user_name = ctx.params.name;\n        const page = Number(ctx.query.page) || 1;\n        const limit = 50;\n\n        const user = await service.user.getUserByLoginName(user_name);\n        if (!user) {\n            ctx.status = 404;\n            ctx.message = '这个用户不存在。';\n            return;\n        }\n\n        const opt = { skip: (page - 1) * limit, limit, sort: '-create_at' };\n        const replies = await service.reply.getRepliesByAuthorId(user._id, opt);\n        const topic_ids = [...new Set(replies.map(reply => {\n            return reply.topic_id.toString();\n        }))];\n        // 获取所有有评论的主题\n        const query = { _id: { $in: topic_ids }};\n        let topics = await service.topic.getTopicsByQuery(query, {});\n        topics = _.sortBy(topics, topic => {\n            return topic_ids.indexOf(topic._id.toString());\n        });\n        const count = await service.reply.getCountByAuthorId(user._id);\n        const pages = Math.ceil(count / limit);\n\n        await ctx.render('user/replies', {\n            user,\n            topics,\n            current_page: page,\n            pages\n        });\n    }\n\n    async showSetting() {\n        const { ctx, service } = this;\n        const id = ctx.user._id;\n        const user = await service.user.getUserById(id);\n\n        if (ctx.request.query.save === 'success') {\n            user.success = '保存成功。';\n        }\n\n        return await ctx.render('user/setting', { user, pageTitle: '设置' });\n    }\n\n    async setting() {\n        const { ctx, service } = this;\n        // 显示出错或成功信息\n        async function showMessage(msg, data, isSuccess) {\n            data = data || ctx.request.body;\n            const user = {\n                loginname: data.loginname,\n                email: data.email,\n                url: data.url,\n                location: data.location,\n                signature: data.signature,\n                weibo: data.weibo,\n                accessToken: data.accessToken\n            };\n\n            if (isSuccess) {\n                user.success = msg;\n            } else {\n                user.error = msg;\n            }\n\n            return await ctx.render('user/setting', { user });\n        }\n\n        // post\n        const { body } = ctx.request;\n        const action = body.action;\n        if (action === 'change_setting') {\n            const url = validator.trim(body.url);\n            const location = validator.trim(body.location);\n            const weibo = validator.trim(body.weibo);\n            const signature = validator.trim(body.signature);\n\n            const user = await service.user.getUserById(ctx.user._id);\n            user.url = url;\n            user.location = location;\n            user.signature = signature;\n            user.weibo = weibo;\n            await user.save();\n            return ctx.redirect('/setting?save=success');\n        }\n\n        if (action === 'change_password') {\n            const oldPass = validator.trim(body.old_pass);\n            const newPass = validator.trim(body.new_pass);\n            if (!oldPass || !newPass) {\n                return showMessage('旧密码或新密码不得为空');\n            }\n\n            const user = await service.user.getUserById(ctx.user._id);\n            const equal = ctx.helper.bcompare(oldPass, user.pass);\n            if (!equal) {\n                return showMessage('当前密码不正确。', user);\n            }\n\n            const newPassHash = ctx.helper.bhash(newPass);\n            user.pass = newPassHash;\n            await user.save();\n            return showMessage('密码已被修改。', user, true);\n        }\n    }\n\n    async toggleStar() {\n        const { ctx, service } = this;\n        const user_id = ctx.request.body.user_id;\n\n        const user = await service.user.getUserById(user_id);\n        user.is_star = !user.is_star;\n        await user.save();\n        ctx.body = { status: 'success' };\n        return;\n    }\n\n    async block() {\n        const { ctx, service } = this;\n        const action = ctx.request.body.action;\n        const loginname = ctx.params.name;\n        const user = await service.user.getUserByLoginName(loginname);\n\n        if (action === 'set_block') {\n            user.is_block = true;\n            await user.save();\n            ctx.body = { status: 'success' };\n        } else if (action === 'cancel_block') {\n            user.is_block = false;\n            await user.save();\n            ctx.body = { status: 'success' };\n        }\n    }\n\n    async deleteAll() {\n        const { ctx, service } = this;\n        const loginname = ctx.params.name;\n        const user = await service.user.getUserByLoginName(loginname);\n\n        // 删除主题\n        await ctx.model.Topic.update({ author_id: user._id }, { $set: { deleted: true }}, { multi: true });\n        // 删除评论\n        await ctx.model.Reply.update({ author_id: user._id }, { $set: { deleted: true }}, { multi: true });\n        // 点赞数也全部干掉\n        await ctx.model.Reply.update({}, { $pull: { ups: user._id }}, { multi: true });\n        ctx.body = { status: 'success' };\n    }\n}\n\nmodule.exports = UserController;\n"]}